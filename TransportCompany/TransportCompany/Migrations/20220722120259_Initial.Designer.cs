// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TransportCompany.Model;

#nullable disable

namespace TransportCompany.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220722120259_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CarDriver", b =>
                {
                    b.Property<int>("CarsId")
                        .HasColumnType("int");

                    b.Property<int>("DriversId")
                        .HasColumnType("int");

                    b.HasKey("CarsId", "DriversId");

                    b.HasIndex("DriversId");

                    b.ToTable("CarDriver");
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Сategories");
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Authorization")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Logs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Authorization = new DateTime(2022, 7, 22, 15, 2, 58, 916, DateTimeKind.Local).AddTicks(5672),
                            UserName = "ilyad"
                        });
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("PhoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("PhoneId");

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CarId");

                    b.HasIndex("ClientId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PhoneId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("TransportCompany.ViewModels.Employee.EmployeesManagersGroup", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeePost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerDepartment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.ToView("EmployeesManagersGroup");
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Client", b =>
                {
                    b.HasBaseType("TransportCompany.Model.DatabaseModels.Person");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Employee", b =>
                {
                    b.HasBaseType("TransportCompany.Model.DatabaseModels.Person");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<string>("Post")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ManagerId");

                    b.HasIndex("OfficeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Manager", b =>
                {
                    b.HasBaseType("TransportCompany.Model.DatabaseModels.Person");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OfficeId")
                        .HasColumnType("int");

                    b.HasIndex("OfficeId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Supplier", b =>
                {
                    b.HasBaseType("TransportCompany.Model.DatabaseModels.Person");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Driver", b =>
                {
                    b.HasBaseType("TransportCompany.Model.DatabaseModels.Employee");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("CarDriver", b =>
                {
                    b.HasOne("TransportCompany.Model.DatabaseModels.Car", null)
                        .WithMany()
                        .HasForeignKey("CarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransportCompany.Model.DatabaseModels.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Office", b =>
                {
                    b.HasOne("TransportCompany.Model.DatabaseModels.Address", "Address")
                        .WithOne("Office")
                        .HasForeignKey("TransportCompany.Model.DatabaseModels.Office", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransportCompany.Model.DatabaseModels.Phone", "Phone")
                        .WithMany("Offices")
                        .HasForeignKey("PhoneId");

                    b.Navigation("Address");

                    b.Navigation("Phone");
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Order", b =>
                {
                    b.HasOne("TransportCompany.Model.DatabaseModels.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId");

                    b.HasOne("TransportCompany.Model.DatabaseModels.Car", "Car")
                        .WithMany("Orders")
                        .HasForeignKey("CarId");

                    b.HasOne("TransportCompany.Model.DatabaseModels.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId");

                    b.Navigation("Address");

                    b.Navigation("Car");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Person", b =>
                {
                    b.HasOne("TransportCompany.Model.DatabaseModels.Address", "Address")
                        .WithMany("Persons")
                        .HasForeignKey("AddressId");

                    b.HasOne("TransportCompany.Model.DatabaseModels.Phone", "Phone")
                        .WithMany("Persons")
                        .HasForeignKey("PhoneId");

                    b.Navigation("Address");

                    b.Navigation("Phone");
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Product", b =>
                {
                    b.HasOne("TransportCompany.Model.DatabaseModels.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransportCompany.Model.DatabaseModels.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId");

                    b.HasOne("TransportCompany.Model.DatabaseModels.Warehouse", "Warehouse")
                        .WithMany("Products")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Warehouse", b =>
                {
                    b.HasOne("TransportCompany.Model.DatabaseModels.Address", "Address")
                        .WithOne("Warehouse")
                        .HasForeignKey("TransportCompany.Model.DatabaseModels.Warehouse", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Client", b =>
                {
                    b.HasOne("TransportCompany.Model.DatabaseModels.Person", null)
                        .WithOne()
                        .HasForeignKey("TransportCompany.Model.DatabaseModels.Client", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Employee", b =>
                {
                    b.HasOne("TransportCompany.Model.DatabaseModels.Person", null)
                        .WithOne()
                        .HasForeignKey("TransportCompany.Model.DatabaseModels.Employee", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("TransportCompany.Model.DatabaseModels.Manager", "Manager")
                        .WithMany("Employees")
                        .HasForeignKey("ManagerId");

                    b.HasOne("TransportCompany.Model.DatabaseModels.Office", "Office")
                        .WithMany("Employees")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Manager", b =>
                {
                    b.HasOne("TransportCompany.Model.DatabaseModels.Person", null)
                        .WithOne()
                        .HasForeignKey("TransportCompany.Model.DatabaseModels.Manager", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("TransportCompany.Model.DatabaseModels.Office", null)
                        .WithMany("Managers")
                        .HasForeignKey("OfficeId");
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Supplier", b =>
                {
                    b.HasOne("TransportCompany.Model.DatabaseModels.Person", null)
                        .WithOne()
                        .HasForeignKey("TransportCompany.Model.DatabaseModels.Supplier", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Driver", b =>
                {
                    b.HasOne("TransportCompany.Model.DatabaseModels.Employee", null)
                        .WithOne()
                        .HasForeignKey("TransportCompany.Model.DatabaseModels.Driver", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Address", b =>
                {
                    b.Navigation("Office")
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("Persons");

                    b.Navigation("Warehouse")
                        .IsRequired();
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Car", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Office", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Managers");
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Phone", b =>
                {
                    b.Navigation("Offices");

                    b.Navigation("Persons");
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Warehouse", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Client", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Manager", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("TransportCompany.Model.DatabaseModels.Supplier", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
